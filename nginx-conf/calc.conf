worker_processes auto;


events {
  worker_connections 1024;
}

http {
    resolver 127.0.0.11 valid=5s;

    limit_req_status 429;

    limit_conn_zone $server_name zone=calc_conn_total:10m;
    limit_conn_zone $binary_remote_addr zone=calc_conn_per_ip:10m;

    limit_conn calc_conn_total 2000;
    limit_conn calc_conn_per_ip 150;
        
    limit_req_zone $server_name zone=calc_req_total:10m rate=1000r/s;
    limit_req_zone $binary_remote_addr zone=calc_req_per_ip:10m rate=100r/s;

    limit_req zone=calc_req_total burst=400;
    limit_req zone=calc_req_per_ip burst=150;

    ssl_certificate     /etc/ssl/calc-cert;
    ssl_certificate_key /etc/ssl/calc-key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 3h;
    ssl_session_cache shared:rsSSL:20m;  # About 80000 sessions
    ssl_session_tickets off;
    server_tokens off; # Hiding the nginx version 

 # default server block ( Deny access from any other domain name/ip )
    server {
        listen 443 ssl default_server;
        server_name _;
        return 444;
      }

    # Main block
    server {
        listen              443 ssl;
        server_name         ${API_SERVER_NAME};           

        # HSTS (nginx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;

        # Prevent browsers from incorrectly detecting non-scripts as scripts
        add_header X-Content-Type-Options "nosniff" always;
        
	# Prevent cache at browser end.
	add_header Cache-Control "no-cache, no-store, must-revalidate" always; 
	add_header "Pragma" "no-cache" always;
        
    
        # whitelisting methods 
        if ($request_method !~ ^(GET|HEAD|POST|DELETE|PUT|PATCH|OPTIONS)$ )
	{
	  return 405;
	}
       

        location / {
            set $backend_servers ${API_SERVICE_NAME};
            # compression is supported in HTTP >=1.1
            proxy_http_version 1.1;
            proxy_pass ${API_SERVER_PROTOCOL}://$backend_servers:${API_SERVICE_PORT};
        }
	
    }

}
